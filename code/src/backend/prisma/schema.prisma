// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  role            Role      @default(USER)
  status          Status    @default(ACTIVE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         Profile?
  clientProfile   ClientProfile?
  supplierProfile SupplierProfile?
  refreshTokens   RefreshToken[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  firstName String
  lastName  String
  avatar    String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientProfile {
  id             String          @id @default(uuid())
  userId         String          @unique
  companyName    String
  cnpj           String          @unique
  segment        String
  size           CompanySize
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contracts      Contract[]
  serviceReviews ServiceReview[]
}

model SupplierProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  companyName String
  cnpj        String    @unique
  description String
  website     String?
  status      Status    @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services    Service[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Services models
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

model Service {
  id             String          @id @default(uuid())
  supplierId     String
  categoryId     String
  title          String
  description    String
  price          Float
  priceType      PriceType
  status         Status          @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  supplier       SupplierProfile @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  category       Category        @relation(fields: [categoryId], references: [id])
  contracts      Contract[]
  serviceReviews ServiceReview[]
}

model Contract {
  id         String       @id @default(uuid())
  clientId   String
  serviceId  String
  status     ContractStatus @default(PENDING)
  startDate  DateTime
  endDate    DateTime?
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  client     ClientProfile @relation(fields: [clientId], references: [id])
  service    Service     @relation(fields: [serviceId], references: [id])
}

model ServiceReview {
  id        String        @id @default(uuid())
  clientId  String
  serviceId String
  rating    Int
  comment   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    ClientProfile @relation(fields: [clientId], references: [id])
  service   Service       @relation(fields: [serviceId], references: [id])
}

// Enums
enum Role {
  USER
  SUPPLIER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum PriceType {
  FIXED
  HOURLY
  MONTHLY
  YEARLY
  CUSTOM
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}